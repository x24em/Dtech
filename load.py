#!/usr/bin/env python3
"""
D-TECH YouTube/TikTok Downloader CLI for Termux
Continuous CLI: enter URLs to download without restarting.
Automatically installs needed packages on first run, saves media in external storage path, and triggers media scan.
"""
import os
import sys
import uuid
import base64
import shutil
import subprocess
from datetime import datetime

# Marker files
PERM_MARKER = os.path.expanduser("~/.termux_storage_permission_granted")
SETUP_MARKER = os.path.expanduser("~/.dtech_setup_complete")

# Embedded cookies and file
COOKIES_FILE = "cookies.txt"
EMBEDDED_COOKIES = """
"""

# yt-dlp format selector: best video+audio
YT_DLP_FORMAT = 'bestvideo+bestaudio/best'

# Determine download directory: use direct external paths for visibility
def get_download_dir():
    candidates = [
        '/storage/emulated/0/Movies',
        '/sdcard/Movies',
        '/storage/emulated/0/Download',
        '/sdcard/Download'
    ]
    for path in candidates:
        try:
            if os.path.isdir(path) and os.access(path, os.W_OK):
                return path
        except Exception:
            continue
    # fallback to Termux shared if external paths fail
    shared_termux = os.path.expanduser("~/storage/shared/Movies")
    if os.path.isdir(shared_termux):
        return shared_termux
    return os.getcwd()
DOWNLOAD_DIR = get_download_dir()

# --------------- Setup functions ---------------

def ensure_installed(cmd_name, pkg_name):
    """Install a Termux package if the command is missing"""
    if shutil.which(cmd_name) is None:
        print(f"📦 Installing {pkg_name}...")
        subprocess.run(["pkg", "install", "-y", pkg_name], check=False)


def setup_requirements():
    """Install dependencies once per device."""
    print("🔧 Checking and installing dependencies...")
    ensure_installed('yt-dlp', 'yt-dlp')
    ensure_installed('ffmpeg', 'ffmpeg')
    open(SETUP_MARKER, 'w').close()


def ensure_setup():
    if not os.path.exists(SETUP_MARKER):
        setup_requirements()

# --------------- Permission and cookies ---------------

def ensure_storage_permission():
    """Request storage access once via termux-setup-storage."""
    if not os.path.isfile(PERM_MARKER):
        print("🔒 Requesting storage permission...")
        subprocess.run(["termux-setup-storage"], check=False)
        open(PERM_MARKER, 'w').close()


def save_embedded_cookies():
    """Write cookies.txt from embedded base64 if missing."""
    if not os.path.exists(COOKIES_FILE) and EMBEDDED_COOKIES.strip():
        with open(COOKIES_FILE, 'wb') as f:
            f.write(base64.b64decode(EMBEDDED_COOKIES.strip()))
        print("✅ cookies.txt generated from embedded data.")

# --------------- Media download and scan ---------------

def trigger_media_scan(path):
    """Trigger Android media scan so file shows in gallery."""
    try:
        subprocess.run(["termux-media-scan", path], check=False)
    except FileNotFoundError:
        subprocess.run([
            "am", "broadcast",
            "-a", "android.intent.action.MEDIA_SCANNER_SCAN_FILE",
            "-d", f"file://{path}"
        ], check=False)


def download_media(url: str, audio_only: bool = False):
    """Download video or audio and save with current timestamp."""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    ext = 'mp3' if audio_only else 'mp4'
    filename = f"{timestamp}_{uuid.uuid4()}.{ext}"
    output_path = os.path.join(DOWNLOAD_DIR, filename)

    cmd = [
        'yt-dlp',
        '-f', YT_DLP_FORMAT,
        '--no-mtime',
        '-o', output_path,
        '--cookies', COOKIES_FILE,
        url
    ]
    if audio_only:
        cmd.extend(['--extract-audio', '--audio-format', 'mp3'])

    print(f"⏳ Downloading {'audio' if audio_only else 'video'} to {output_path}...")
    try:
        subprocess.run(cmd, check=True)
        if os.path.isfile(output_path):
            print(f"✅ Download complete: {output_path}")
            trigger_media_scan(output_path)
            print("🔍 Media scanned and should appear in your gallery.\n")
            return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Download failed: {e}\n")
    return False

# --------------- Main loop ---------------

def main_loop():
    print(f"🌟 D-TECH Downloader CLI (continuous mode) 🌟")
    print(f"Media will be saved to: {DOWNLOAD_DIR}\n")
    print("Type 'mp3 <URL>' for audio or just paste <URL> for video. Type 'q' to quit.\n")
    while True:
        user_input = input("> ").strip()
        if not user_input:
            continue
        if user_input.lower() in ('q', 'quit', 'exit'):
            print("👋 Exiting.")
            break
        parts = user_input.split(None, 1)
        if parts[0].lower() == 'mp3' and len(parts) == 2:
            download_media(parts[1], audio_only=True)
        else:
            download_media(parts[0], audio_only=False)


if __name__ == '__main__':
    ensure_setup()
    ensure_storage_permission()
    save_embedded_cookies()
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    main_loop()
