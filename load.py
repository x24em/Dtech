#!/usr/bin/env python3
"""
D-TECH YouTube/TikTok Downloader CLI for Termux
Continuous CLI: enter URLs to download without restarting.
Automatically installs needed packages on first run, saves media in external storage path, and triggers media scan.
"""
import os
import sys
import uuid
import base64
import shutil
import subprocess
from datetime import datetime

# Marker files
PERM_MARKER = os.path.expanduser("~/.termux_storage_permission_granted")
SETUP_MARKER = os.path.expanduser("~/.dtech_setup_complete")

# Embedded cookies and file
COOKIES_FILE = "cookies.txt"
EMBEDDED_COOKIES = """IyBOZXRzY2FwZSBIVFRQIENvb2tpZSBGaWxlCiMgVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSB5dC1kbHAuICBEbyBub3QgZWRpdC4KCi5nb29nbGUuY29tCVRSVUUJL3ZlcmlmeQlUUlVFCTE3NjUyMDI4MzQJU05JRAlBQmFibG5jN3Y4LUx4S1FMTkdEZWttUUFINjZaUElNVmh1c3YwN2dQNy1RbVVIX3QwVlg0Qkc1dTRFVmdMRllDMkJiTXhNcHdlb2loUTl6LV9DWDllRU5rckRqTDZwVmw1dVUKLmdvb2dsZS5jb20JVFJVRQkvCVRSVUUJMTc2NDMzODE5NglBRUMJQVZoX1YyZ3M3ODhHYmJYdW5lcVQ3cExXcnFlVFpvQlRnMTJJalBYdXRZM25GVUluUnVacnAzcUZGQQouZ29vZ2xlLmNvbQlUUlVFCS8JVFJVRQkxNzY1MjAyODM0CU5JRAk1MjQ9al9DM2dNMkFPWEs0c1BaVDk1bzFtOGhwZVR3UndpV3pKeFB1UEF6dDZvb25XS2RyRW5hNk5hNGVoV3Awd0VmSWlIc1N2YkgwaXE4Q1p0QXZjNzM4U2xwdUNkZXctVlVzUmtyTXRENDRPVUlUcmhIYmhJSjhCbmRZaWdlT3BZeFpSd19XRmM1U2FFdEIzbEtkUV9rUFA5S28wSHBQd2wwOXZ0dTNOMXRjMDc5WmZ0clhoMEtoU05wdUlqaGNMS1pLYjN3UXBWWWFwTUhBM1ZITjQyd3pBa1FpZ2F1YmY2WFNSSFF3TERzZUxBQ0tEYS03RlBuaFlsS0d0dHV1Z3ZkdkZxXzdiUWdseWZFaE51SF9MdnJKTmZKSC1JanRvYzBSN2tCenlSdGFwVlF5MjhuNi1jbkRCX2Rjbk9wV2dJbVRlSGNaMnlhM1doLVFlYndBUGZqb0dSWTJiTnhaSE9VeVE0M1ltQy1ZTTRCMW9lMm5KS0hUWExkUXJFSE5ZVTA2VlZnOEFDcnE1T3c4NUFRSWdiZEluNXRyVGtPOWxuOXFnbXRnRjhXSXEzSUk0RjBpUjZMTWI3Y2dNTXJkNkU0Z0VKeUZSbUFpV1RuUGdtWWQ0ejdjUGhYeWlMamtvY0FHTTl2SUtFZFpEWF8tSU1kbmYzNTFLYXR3Q1NXdHNOQ3pxdjRST2pSMWVtaGNmbEl0VkU3Q1VxRk1VTm5IMF8ycGlTNjZfV09BNlFaTDNqQTR4X0VQY2phSHkzS3ZOLXdQLWVsdW53RXlBSnlkalZXQjFRUG0tb19jeHNxZWpMYWdhalhNbVFFUE0yX1BuSnR2ZWNuNU1rcDQtZjFWM04tVmI4VVNCamtISmtxTVI3RmZFS1JkWGhsaVBEeHcxXzIyeXVUS3ZYYUdYQ3hNWmd6UHd1MmwxUFBqU3F3WmhMYWlhR1NlOXQzeTV1cmxzLWgzRFJFCi5nb29nbGUuY29tCVRSVUUJLwlGQUxTRQkxNzgzMzQ2MjU2CVNJRAlnLmEwMDB4Z2l5NjB0N0tNS1NaQlgzNHlrdXFIMGxVYkhXN0NBaDN4ZlNiTEZyMjc1S1NDS0hBVVFKWjgteDFnVVM1VzNTWWJoNlFRQUNnWUtBWGdTQVJVU0ZRSEdYMk1pSVo3dWE2eDNjdEJqdU9nb2dqcmNnQm9WQVVGOHlLcmU0TTBOak8xQm13QlEzZHVFVTlGLTAwNzYKLmdvb2dsZS5jb20JVFJVRQkvCVRSVUUJMTc4MzM0NjI1NglfX1NlY3VyZS0xUFNJRAlnLmEwMDB4Z2l5NjB0N0tNS1NaQlgzNHlrdXFIMGxVYkhXN0NBaDN4ZlNiTEZyMjc1S1NDS0hBamFvMEQ4WUFjeDgtNWJkRHA3eGV3QUNnWUtBZTRTQVJVU0ZRSEdYMk1pSFRkNE52V3RPYXVpZUFBMmJXTXM5Um9WQVVGOHlLcTY4RlEyTk93bHo1cmd1aGhkalVYUDAwNzYKLmdvb2dsZS5jb20JVFJVRQkvCVRSVUUJMTc4MzM0NjI1NglfX1NlY3VyZS0zUFNJRAlnLmEwMDB4Z2l5NjB0N0tNS1NaQlgzNHlrdXFIMGxVYkhXN0NBaDN4ZlNiTEZyMjc1S1NDS0hIenhiamZXdTZmSzlLRTNqOUtwRllRQUNnWUtBZjBTQVJVU0ZRSEdYMk1pX3Zob20yMHBYRHVCX0lmcThDQ2I1Qm9WQVVGOHlLcG9sMlQ3YmQ0b3k4Szc5eC1jN0NVTzAwNzYKLmdvb2dsZS5jb20JVFJVRQkvCUZBTFNFCTE3ODMzNDYyNTYJSFNJRAlBY1ZuZDBMNWIzSW9oeVB6eQouZ29vZ2xlLmNvbQlUUlVFCS8JVFJVRQkxNzgzMzQ2MjU2CVNTSUQJQUxQN2VOTVBzZnRpY25OWmUKLmdvb2dsZS5jb20JVFJVRQkvCUZBTFNFCTE3ODMzNDYyNTYJQVBJU0lECTR2eGxCUkZ1dG4wc1ZuS1ovQV9hWk41djg0RGhyOFNzWTQKLmdvb2dsZS5jb20JVFJVRQkvCVRSVUUJMTc4MzM0NjI1NglTQVBJU0lECUU2TDFQcW1mUHRVUVA4TW8vQXVQSkc3VThwd1hOTHlab0wKLmdvb2dsZS5jb20JVFJVRQkvCVRSVUUJMTc4MzM0NjI1NglfX1NlY3VyZS0xUEFQSVNJRAlFNkwxUHFtZlB0VVFQOE1vL0F1UEpHN1U4cHdYTkx5Wm9MCi5nb29nbGUuY29tCVRSVUUJLwlUUlVFCTE3ODMzNDYyNTYJX19TZWN1cmUtM1BBUElTSUQJRTZMMVBxbWZQdFVRUDhNby9BdVBKRzdVOHB3WE5MeVpvTAouZ29vZ2xlLmNvbQlUUlVFCS8JRkFMU0UJMTc4MDkyNzcyNwlTSURDQwlBS0V5WHpXTlE1QWNMLURhXzlHWmZ1cXQ4dDFnT3FhTTVra1RJT2pMN2RaQU1rMXZJRk5nWU9YYzN0c0xydS1xN01lZ0FBRmY2ZwouZ29vZ2xlLmNvbQlUUlVFCS8JVFJVRQkxNzgwOTI3NzI3CV9fU2VjdXJlLTFQU0lEQ0MJQUtFeVh6V3ZKekFXT3hwMmU5M2FMbEZiemY4eWVEejVSYjlDRnh0VHo5Y29MTHlhSnlBaTVTdFhZekhuUEJ1dndwbWR2UERiCi5nb29nbGUuY29tCVRSVUUJLwlUUlVFCTE3ODA5Mjc3MjcJX19TZWN1cmUtM1BTSURDQwlBS0V5WHpWNjJBZk1Kck5MbTVCSktTSmpsYWN3VExaWktrWEZPWTNhbW5XUVNnTG5pTEdUcWtzX3VLa001RmNOQ2k3aXdHVjNIdwouZ29vZ2xlLmNvbQlUUlVFCS8JRkFMU0UJMTc2NDk0MzYzMwlTRUFSQ0hfU0FNRVNJVEUJQ2dRSWw1NEIKd3d3Lndpa2lwZWRpYS5vcmcJRkFMU0UJLwlUUlVFCTE3NTIxODg2ODYJV01GLUxhc3QtQWNjZXNzCTA4LUp1bi0yMDI1Cnd3dy53aWtpcGVkaWEub3JnCUZBTFNFCS8JVFJVRQkxNzQ5Mzk1NDA4CU5ldHdvcmtQcm9iZUxpbWl0CTAuMDAxCi53aWtpcGVkaWEub3JnCVRSVUUJLwlUUlVFCTE3NTIxODg2ODYJV01GLUxhc3QtQWNjZXNzLUdsb2JhbAkwOC1KdW4tMjAyNQoud2lraXBlZGlhLm9yZwlUUlVFCS8JVFJVRQkxNzgwOTE2Njg2CVdNRi1VbmlxCXJLVWFWSDJoUm00a2tYM1hkYlNUalFJRkFBSUJBRnZkTnZBR0pNXzExOEQxbDVIZUVpS2RoclVWTWNqUlduUjYKLndpa2lwZWRpYS5vcmcJVFJVRQkvCVRSVUUJMAlHZW9JUAlaQTpFQzpQb3J0X0VsaXphYmV0aDotMzMuOTU6MjUuNjI6djQKLm1vemlsbGEub3JnCVRSVUUJLwlGQUxTRQkxNzgzMzQ2MTk1CV9nYV9COUNZMUM5VkJDCUdTMi4xLnMxNzQ4Nzg2MDY4JG8xJGcxJHQxNzQ4Nzg2MTk1JGo2MCRsMCRoMAoubW96aWxsYS5vcmcJVFJVRQkvCUZBTFNFCTE3ODMzNDYxOTUJX2dhCUdBMS4xLjE0Njk2MTU3ODQuMTc0ODc4NjA2OQoudGlrdG9rLmNvbQlUUlVFCS8JVFJVRQkxNzgwOTI3NzM0CXR0d2lkCTElN0NQOWx2SGVWRDJKZzI2R1BBU3JvV0plRGpQQTNMYllSNHBZN0N6TnpEODh3JTdDMTc0OTM5MTczNCU3Q2E4M2ZmN2IyMTRkMjIzZTFkOTBmZmM2Nzg1MGY5NTMyMWY5NDQzNjA1YTYzOWI2Mjc0ODQyNDI1ZGJlYmIyNGIKLnRpa3Rvay5jb20JVFJVRQkvCVRSVUUJMTc1Mzk3MDIwOAlwYXNzcG9ydF9jc3JmX3Rva2VuCWExMDc3OTg1M2EyNzZmMTI5NzMyY2NiOTNhNjFkMTQzCi50aWt0b2suY29tCVRSVUUJLwlUUlVFCTE3NTM5NzAyMDgJcGFzc3BvcnRfY3NyZl90b2tlbl9kZWZhdWx0CWExMDc3OTg1M2EyNzZmMTI5NzMyY2NiOTNhNjFkMTQzCi50aWt0b2suY29tCVRSVUUJLwlUUlVFCTE3NTAyNzA5NzMJbXNUb2tlbglnay15RjVVNUpZaEk4a0Z4UEJ3YVVlb0IxMVFjSzc2eml2UFNMOXo4S3k2ckpVd1AwUC0zc2IySEpFMEFJSmlpQ0U4ZGJ3ZUFLR3Aza0JTb2RsOV83TEtJb0FCbnR4RGZYaWtBMmZNTkd5c00yQkxuTE9oYmE4bUFselY3c25aZlJRRzdRNHp3SUlMaVcxcFJhcFhjCi50aWt0b2suY29tCVRSVUUJLwlUUlVFCTE3NTM5NzAyODAJbXVsdGlfc2lkcwk3NDA3OTA5NjkyMTE2OTI3NDkzJTNBODZhYjMxZWJjNmQzOTVlMzY2YTQzZmI2OWYwOTkwYjkKLnRpa3Rvay5jb20JVFJVRQkvCVRSVUUJMTc1Mzk3MDI4MAljbXBsX3Rva2VuCUFnUVFBUE1ZRi1STzByYnd3RG8yXzEwODhsM0ZJU09XZjRTVFlOOGxzZwoudGlrdG9rLmNvbQlUUlVFCS8JRkFMU0UJMTc1MTM3ODI4MAlwYXNzcG9ydF9hdXRoX3N0YXR1cwljNmQ0MTQ4NWUwZjE5Mjc0MTdiOTBhNWIyYmU5MDlmNSUyQwoudGlrdG9rLmNvbQlUUlVFCS8JVFJVRQkxNzUxMzc4MjgwCXBhc3Nwb3J0X2F1dGhfc3RhdHVzX3NzCWM2ZDQxNDg1ZTBmMTkyNzQxN2I5MGE1YjJiZTkwOWY1JTJDCi50aWt0b2suY29tCVRSVUUJLwlUUlVFCTE3Nzk4OTAyODMJc2lkX2d1YXJkCTg2YWIzMWViYzZkMzk1ZTM2NmE0M2ZiNjlmMDk5MGI5JTdDMTc0ODc4NjI4NCU3QzE1NTUxOTk3JTdDRnJpJTJDKzI4LU5vdi0yMDI1KzEzJTNBNTglM0EwMStHTVQKLnRpa3Rvay5jb20JVFJVRQkvCVRSVUUJMTc2NDMzODI4MAl1aWRfdHQJZDJiNmFiNDVmMDAwZTZiMDFhMGYzMTU1MGFmNmQ5NTkyMmQ4YzllMWRjYjE1ZDFkOGUwODczY2RhZWYxYjkyMwoudGlrdG9rLmNvbQlUUlVFCS8JVFJVRQkxNzY0MzM4MjgwCXVpZF90dF9zcwlkMmI2YWI0NWYwMDBlNmIwMWEwZjMxNTUwYWY2ZDk1OTIyZDhjOWUxZGNiMTVkMWQ4ZTA4NzNjZGFlZjFiOTIzCi50aWt0b2suY29tCVRSVUUJLwlUUlVFCTE3NjQzMzgyODAJc2lkX3R0CTg2YWIzMWViYzZkMzk1ZTM2NmE0M2ZiNjlmMDk5MGI5Ci50aWt0b2suY29tCVRSVUUJLwlUUlVFCTE3NjQzMzgyODAJc2Vzc2lvbmlkCTg2YWIzMWViYzZkMzk1ZTM2NmE0M2ZiNjlmMDk5MGI5Ci50aWt0b2suY29tCVRSVUUJLwlUUlVFCTE3NjQzMzgyODAJc2Vzc2lvbmlkX3NzCTg2YWIzMWViYzZkMzk1ZTM2NmE0M2ZiNjlmMDk5MGI5Ci50aWt0b2suY29tCVRSVUUJLwlUUlVFCTE3NjQzMzgyNzkJc2lkX3VjcF92MQkxLjAuMC1LREl5Tm1ObFlqSmpOemN6T1dNM056azJZak0wTkROalkyWTFPVFpqWldJeE5HVTBObU0wWmpnS0dRaUZpTGIyMjlPTDUyWVE2cmp4d1FZWXN3czRDRUFTU0FRUUF4b0diV0ZzYVhaaElpQTRObUZpTXpGbFltTTJaRE01TldVek5qWmhORE5tWWpZNVpqQTVPVEJpT1EKLnRpa3Rvay5jb20JVFJVRQkvCVRSVUUJMTc2NDMzODI3OQlzc2lkX3VjcF92MQkxLjAuMC1LREl5Tm1ObFlqSmpOemN6T1dNM056azJZak0wTkROalkyWTFPVFpqWldJeE5HVTBObU0wWmpnS0dRaUZpTGIyMjlPTDUyWVE2cmp4d1FZWXN3czRDRUFTU0FRUUF4b0diV0ZzYVhaaElpQTRObUZpTXpGbFltTTJaRE01TldVek5qWmhORE5tWWpZNVpqQTVPVEJpT1EKLnRpa3Rvay5jb20JVFJVRQkvCUZBTFNFCTE3NjQzMzgyODAJc3RvcmUtaWRjCW1hbGl2YQoudGlrdG9rLmNvbQlUUlVFCS8JRkFMU0UJMTc2NDMzODI4MAlzdG9yZS1jb3VudHJ5LXNpZ24JTUVJRURMR2h6TTJtT1pQSXphNkJ5UVFnX0kyN0pRazdQWGxtN0ZaN1hhMGJtZE8xcnFETWxpdkozXzBpZDdaZU00Z0VFUFBCQVUteEdnd3NKT1U2VW1PaDBYNAoudGlrdG9rLmNvbQlUUlVFCS8JRkFMU0UJMTc2NDMzODI4MAlzdG9yZS1jb3VudHJ5LWNvZGUJemEKLnRpa3Rvay5jb20JVFJVRQkvCUZBTFNFCTE3NjQzMzgyODAJc3RvcmUtY291bnRyeS1jb2RlLXNyYwl1aWQKLnRpa3Rvay5jb20JVFJVRQkvCUZBTFNFCTE3NjQzMzgyODAJdHQtdGFyZ2V0LWlkYwl1c2Vhc3QxYQoudGlrdG9rLmNvbQlUUlVFCS8JRkFMU0UJMTc4MDMyMjI4Mwl0dC10YXJnZXQtaWRjLXNpZ24JaEFxdmMyT2pCa2RoU3g4a1Z5RWlzR0tGQkwzRWF5QmZ0NW0xbEJMaGF3N2Nla1dXSE0tZE84Zndva2RQQ0FjaWRQM0cwcm1lQkEtQS1VN01NQmZ2T0N0MHczVENkbXVqNm9FTERvSVh4VU1iTGhLTHlSX2Y2bnh0a1VoLUl5WElYRGY4Q19GVlFObjNaVThEZU93TzRocTJGZnd4ZE9qelhvTnhWd0NZR3Nmam5VVHlBS3FTdllWVDA1ck5fdTdwOENIenNleVVpSXFWc0JZOXNGTGk2b0dRc25PNDB5VGVBeV9OZXpLeHBBM2R1NlFqeldCV0wzNDE1bUlLOVRMOHNaN1UwenNfaHF2dW53RG9uWlJpRjlsdlZNSlFjbWR5Qnl2S2ZFRlNqYWxMU29BZGo5RkVCOWd3cTROeXFGNXY0UzR1bDFXeFE4LXpoSXNGVmEwMlQ2c1Z5WUpTc2NGZE5uNG1KQi1vWWZqbFkyejhfaUJibG4wZG1HUS1pRHVsbG0zNkF0dk91OTVmbDVzUEQwQlNkaV92NlFVSXk5bHlUY2ItZ1FQalJKUm84Q0xkeGhaT1pWd3lwLUhVSXdic0VVQ0g4YWxGWHRfWWl0aDdIYlBjak9ZR0ZHc3UtUzc1X0ZCNlhvaGppcW1xQmJVRlNVcXphcmNudVIyYlRzQ3UKLnRpa3Rvay5jb20JVFJVRQkvCVRSVUUJMTc2NDk1ODk3NAl0dF9jaGFpbl90b2tlbglqeEpYeGhwNmlxSVlmT2pwM0tXSjVnPT0KLnRpa3Rvay5jb20JVFJVRQkvCUZBTFNFCTE3ODAzMjIyOTMJb2Rpbl90dAlhNzMxMjI2YjAyNGI4YzU1NjdiMDE2MzlhYzllZWIyZjg4OGNiNjljNmFjY2RiN2E2ODI4NjJhNzBhZDcwMWE5MWJjODc5NTE0ZTczNWRmZDEzZTMzNGU0NjIxNjc4YmM3OWFiOWFiYzhkNjdlMTFjYTBiZDcyYmUxODgyMjk0OGU4ZGZjZTA2NDM1NTczZTcwZTBkOWI2N2VjY2ExNmE1Ci50aWt0b2suY29tCVRSVUUJLwlUUlVFCTAJdHRfY3NyZl90b2tlbgk2MEVtTHo4bi12cDNUOGdKZzVkVExsUDRsSnM5YWJGNDY2Vm8KLnd3dy50aWt0b2suY29tCVRSVUUJLwlUUlVFCTE3NzUzMTE4MTYJdGlrdG9rX3dlYmFwcF90aGVtZV9zb3VyY2UJbGlnaHQKLnd3dy50aWt0b2suY29tCVRSVUUJLwlUUlVFCTE3NzUzMTE4MTYJdGlrdG9rX3dlYmFwcF90aGVtZQlsaWdodAoud3d3LnRpa3Rvay5jb20JVFJVRQkvCVRSVUUJMTc0OTgyMzgzOAlwZXJmX2ZlZWRfY2FjaGUJeyUyMmV4cGlyZVRpbWVzdGFtcCUyMjoxNzQ5NTY0MDAwMDAwJTJDJTIyaXRlbUlkcyUyMjpbJTIyNzUwMTMxNzQxODExNTk2MDExOSUyMiUyQyUyMjc0ODg0NTI4MzAxOTg1ODI1MzUlMjJdfQphY2NvdW50cy5nb29nbGUuY29tCUZBTFNFCS8JVFJVRQkxNzgzOTUxNjUwCV9fSG9zdC1HQVBTCTE6M2ZrNmlrS0JIYW1tY24zaXRXREs4WjlzRUNSejJpa1RaVlBvUzF3S3h0Z01vNFhzcEIweW5pNDNYNEpMeTk5VGRiQ2ZVZm1Cby0xc2RiUVRhSWZHdGRGTlFqV1JjQTpSRGNVYTNiekZPanFhdVJxCmFjY291bnRzLmdvb2dsZS5jb20JRkFMU0UJLwlUUlVFCTE3NTEzNzgyMjMJT1RaCTgxMDgwMzdfNDhfNDhfXzQ4XwphY2NvdW50cy5nb29nbGUuY29tCUZBTFNFCS8JVFJVRQkxNzgzMzQ2MjU3CUxTSUQJcy5aQXxzLnlvdXR1YmU6Zy5hMDAweGdpeTY2Tl9PQnlobzFKX2JBV0ZDaE9ZWXR3NWhVMDBuU0lJOG5jZVpoNW55djZSc2ZSaTJ5RFlaczZSY08zRlBpOFl6Z0FDZ1lLQWJRU0FSVVNGUUhHWDJNaTd4elZHS0FVMkZ2MkplcUxxeko5d3hvVkFVRjh5S3BoTUdpbndFVzNsaG1EWlRpSXhiQTMwMDc2CmFjY291bnRzLmdvb2dsZS5jb20JRkFMU0UJLwlUUlVFCTE3ODMzNDYyNTcJX19Ib3N0LTFQTFNJRAlzLlpBfHMueW91dHViZTpnLmEwMDB4Z2l5NjZOX09CeWhvMUpfYkFXRkNoT1lZdHc1aFUwMG5TSUk4bmNlWmg1bnl2NlJJUjJ4NlBhNTFVUWxMT0ZkX2xzTE53QUNnWUtBUXdTQVJVU0ZRSEdYMk1pdE1Qc1NBS0otMURBM1RJVV9YV2daQm9WQVVGOHlLb3M0NWJpRmJMMzBmZUFnbDF2NmJsZTAwNzYKYWNjb3VudHMuZ29vZ2xlLmNvbQlGQUxTRQkvCVRSVUUJMTc4MzM0NjI1NwlfX0hvc3QtM1BMU0lECXMuWkF8cy55b3V0dWJlOmcuYTAwMHhnaXk2Nk5fT0J5aG8xSl9iQVdGQ2hPWVl0dzVoVTAwblNJSThuY2VaaDVueXY2UnFwa3N0bllNRWdFaHpNRURsRlBtSXdBQ2dZS0FYa1NBUlVTRlFIR1gyTWlkQllGUVEySU4wckVzYjNzNFFnWUtSb1ZBVUY4eUtwVnBhVXBHR0F3ZldiWnVJLUFMYmJoMDA3NgphY2NvdW50cy5nb29nbGUuY29tCUZBTFNFCS8JVFJVRQkxNzgzMzQ2MjU3CUFDQ09VTlRfQ0hPT1NFUglBRnhfcUk2NUU3bXNRdHZpX3gzb1U5OGV1TkhScUtvdHlCZEl3QUhoNnVVVS1sQTB0S0xpeHU1VEVkeExLUk5mTVpmMmhVUk01UUdITkVJekx4TU00dWZYQkJSUE1BYVdzRUdOaVlVWktYdlNpclJqYnFGVHNjZFV5VlptMFpodlRkNTUyTHE3WVVKZwphY2NvdW50cy5nb29nbGUuY29tCUZBTFNFCS8JVFJVRQkxNzgwMzIyMjY3CUxTT0xICV9TVklfRUpfR3JNS3cwSTBER0FNaVAwMUJSVVJJWmw5eFNtZFpSMWQ1YUVZMVgxTnRWVzEzWTFsUFZXbGFiRXRJYUZGbFdYaExTSGh4YkcwNGMyWlRTRmR4YWpkdlZIQkJVazVKWDBkclNRXzoyOTE0NjQ1Mjo1NWQ1Cnd3dy50aWt0b2suY29tCUZBTFNFCS8JRkFMU0UJMTc1NjU2MjI4MAlsYXN0X2xvZ2luX21ldGhvZAlnb29nbGUKd3d3LnRpa3Rvay5jb20JRkFMU0UJLwlGQUxTRQkxNzU3MTY3ODM0CW1zVG9rZW4JbTczSkJSRURHSm44X2JneHF3Q3YydGdoZEZiNkEwb0VHSnJWZjFqQnBjcF9PbnkxVkp1NWVGNGxwSFc2SnFKcUlfQWRsV1ZPNVd1T0t2VngyamFnRXNhRmk1eDNENVpKcjdKNEtpdmNwakl4NjFZbndoTU1TUHpMdmFHRFl5R2ZpdTMtNGphcTZpTXdra0JUemNMegoueW91dHViZS5jb20JVFJVRQkvCVRSVUUJMTc0OTM5MzQzOQlHUFMJMQoueW91dHViZS5jb20JVFJVRQkvCVRSVUUJMTc2NDk0NDgyNQlWSVNJVE9SX0lORk8xX0xJVkUJX1dTTlNDSW1jZlUKLnlvdXR1YmUuY29tCVRSVUUJLwlUUlVFCTE3NjQ5NDQ4MjUJVklTSVRPUl9QUklWQUNZX01FVEFEQVRBCUNnSmFRUklFR2dBZ0pnJTNEJTNECi55b3V0dWJlLmNvbQlUUlVFCS8JVFJVRQkxNzY0OTQzNjUyCV9fU2VjdXJlLVJPTExPVVRfVE9LRU4JQ1BhZW9zSDU5YS13eWdFUXY0dXcydl9oalFNWTFLalk0UF9oalFNJTNECi55b3V0dWJlLmNvbQlUUlVFCS8JRkFMU0UJMAlQUkVGCWY2PTQwMDAwMDAwJnR6PVVUQyZobD1lbgoueW91dHViZS5jb20JVFJVRQkvCVRSVUUJMTc4MDkyNzY1MQlfX1NlY3VyZS0xUFNJRFRTCXNpZHRzLUNqSUI1SDAzUDN1RWJIeVdwU1ZfSkNXbVgtcmZzVDMwT0dIaVlOb2pVdXJRdmZSVEhmanRSbFZBOGJ4c2xza2RoSFkwaGhBQQoueW91dHViZS5jb20JVFJVRQkvCVRSVUUJMTc4MDkyNzY1MQlfX1NlY3VyZS0zUFNJRFRTCXNpZHRzLUNqSUI1SDAzUDN1RWJIeVdwU1ZfSkNXbVgtcmZzVDMwT0dIaVlOb2pVdXJRdmZSVEhmanRSbFZBOGJ4c2xza2RoSFkwaGhBQQoueW91dHViZS5jb20JVFJVRQkvCUZBTFNFCTE3ODM5NTE2NTEJSFNJRAlBUlZ2OC1QMTJPMEJhdm9aNgoueW91dHViZS5jb20JVFJVRQkvCVRSVUUJMTc4Mzk1MTY1MQlTU0lECUFSZDZsTnhIdkZ5RU9Wc25OCi55b3V0dWJlLmNvbQlUUlVFCS8JRkFMU0UJMTc4Mzk1MTY1MQlBUElTSUQJNHZ4bEJSRnV0bjBzVm5LWi9BX2FaTjV2ODREaHI4U3NZNAoueW91dHViZS5jb20JVFJVRQkvCVRSVUUJMTc4Mzk1MTY1MQlTQVBJU0lECUU2TDFQcW1mUHRVUVA4TW8vQXVQSkc3VThwd1hOTHlab0wKLnlvdXR1YmUuY29tCVRSVUUJLwlUUlVFCTE3ODM5NTE2NTEJX19TZWN1cmUtMVBBUElTSUQJRTZMMVBxbWZQdFVRUDhNby9BdVBKRzdVOHB3WE5MeVpvTAoueW91dHViZS5jb20JVFJVRQkvCVRSVUUJMTc4Mzk1MTY1MQlfX1NlY3VyZS0zUEFQSVNJRAlFNkwxUHFtZlB0VVFQOE1vL0F1UEpHN1U4cHdYTkx5Wm9MCi55b3V0dWJlLmNvbQlUUlVFCS8JRkFMU0UJMTc4Mzk1MTY1MQlTSUQJZy5hMDAweGdpeTYwdDdLTUtTWkJYMzR5a3VxSDBsVWJIVzdDQWgzeGZTYkxGcjI3NUtTQ0tIQVVRSlo4LXgxZ1VTNVczU1liaDZRUUFDZ1lLQVhnU0FSVVNGUUhHWDJNaUlaN3VhNngzY3RCanVPZ29nanJjZ0JvVkFVRjh5S3JlNE0wTmpPMUJtd0JRM2R1RVU5Ri0wMDc2Ci55b3V0dWJlLmNvbQlUUlVFCS8JVFJVRQkxNzgzOTUxNjUxCV9fU2VjdXJlLTFQU0lECWcuYTAwMHhnaXk2MHQ3S01LU1pCWDM0eWt1cUgwbFViSFc3Q0FoM3hmU2JMRnIyNzVLU0NLSEFqYW8wRDhZQWN4OC01YmREcDd4ZXdBQ2dZS0FlNFNBUlVTRlFIR1gyTWlIVGQ0TnZXdE9hdWllQUEyYldNczlSb1ZBVUY4eUtxNjhGUTJOT3dsejVyZ3VoaGRqVVhQMDA3NgoueW91dHViZS5jb20JVFJVRQkvCVRSVUUJMTc4Mzk1MTY1MQlfX1NlY3VyZS0zUFNJRAlnLmEwMDB4Z2l5NjB0N0tNS1NaQlgzNHlrdXFIMGxVYkhXN0NBaDN4ZlNiTEZyMjc1S1NDS0hIenhiamZXdTZmSzlLRTNqOUtwRllRQUNnWUtBZjBTQVJVU0ZRSEdYMk1pX3Zob20yMHBYRHVCX0lmcThDQ2I1Qm9WQVVGOHlLcG9sMlQ3YmQ0b3k4Szc5eC1jN0NVTzAwNzYKLnlvdXR1YmUuY29tCVRSVUUJLwlGQUxTRQkxNzgwOTI4ODI2CVNJRENDCUFLRXlYelVsUUdzelJjekpROFRTbFJWWWZSaGJxdDVGRU9RbzRBSUlFMUxleUt3eVBKQnM0SlJrOGNYN1NGYWVrMEhkRDBNbwoueW91dHViZS5jb20JVFJVRQkvCVRSVUUJMTc4MDkyODgyNglfX1NlY3VyZS0xUFNJRENDCUFLRXlYelhzMmJRbTE1RTNQalJtbmhYb3RkYnRIcTBQQjdzcGVreldFR0JzWFF3MGlKMjZmLVZNNmZrWlozUmtwYWxJbUFqNQoueW91dHViZS5jb20JVFJVRQkvCVRSVUUJMTc4MDkyODgyNglfX1NlY3VyZS0zUFNJRENDCUFLRXlYelZ2eTBrSTRObWxOZHZGWW1YTkpkTnlyZC1pX3ZOczBKbm8tSkZJdDhrUHpyWVdrdFpicmtoVXBpS3ZMZURtSENwcl9BCi55b3V0dWJlLmNvbQlUUlVFCS8JVFJVRQkxNzgzOTUxNjUyCUxPR0lOX0lORk8JQUZtbUYyc3dSUUloQUsxcEQwY09DTFhrQWlIMGtBeDR0REkyWVhFSVE2YUxNaU5SNmR2aEw4a05BaUF1NV9NYTNwdXFJckE3UHFldFFWckhzZFVLaGpUOS1RTkxIdHJlMGdsZUlROlFVUTNNak5tZDNCTU5IaHdZalEyVUdsSFNXTlRXbFpGVkV0RVJHY3ljM0ZrYkRGWVdUWjVVV05IUVRONFZtNWxTbmxoYTBKaFF6bHBUV1Z5UVd0U0xVSjBSR3BVZVhOemNUTm5TMkpUYTBzelkwWkxUMTkzTTNSS2R6QkdjMVY0YXpCdWIwWTVNME5rVkMxUVRXOVpiMFJZZFZJMk9FOUhWVE5NTldSaWNYYzJRbkJ3YVVGU1YyMXRaMEZoV21WdGQyODBPV3hXVm5WdVVqVTJOV2RXVGs1MwoueW91dHViZS5jb20JVFJVRQkvCVRSVUUJMAlZU0MJVF9UNnBqNnlKUmcKLnlvdXR1YmUuY29tCVRSVUUJLwlUUlVFCTE4MTI0NjQ4MjUJX19TZWN1cmUtWVRfVFZGQVMJdD00ODU5NDImcz0yCi55b3V0dWJlLmNvbQlUUlVFCS8JVFJVRQkxNzY0OTQ0ODI1CURFVklDRV9JTkZPCUNoeE9lbFY0VFhwVk5FNUVhek5OZWtVMFQxUlZlazlVUlRSTlVUMDlFTG03bHNJR0
"""

# yt-dlp format selector: best video+audio
YT_DLP_FORMAT = 'bestvideo+bestaudio/best'

# Determine download directory: use direct external paths for visibility
def get_download_dir():
    candidates = [
        '/storage/emulated/0/Movies',
        '/sdcard/Movies',
        '/storage/emulated/0/Download',
        '/sdcard/Download'
    ]
    for path in candidates:
        try:
            if os.path.isdir(path) and os.access(path, os.W_OK):
                return path
        except Exception:
            continue
    # fallback to Termux shared if external paths fail
    shared_termux = os.path.expanduser("~/storage/shared/Movies")
    if os.path.isdir(shared_termux):
        return shared_termux
    return os.getcwd()
DOWNLOAD_DIR = get_download_dir()

# --------------- Setup functions ---------------

def ensure_installed(cmd_name, pkg_name):
    """Install a Termux package if the command is missing"""
    if shutil.which(cmd_name) is None:
        print(f"📦 Installing {pkg_name}...")
        subprocess.run(["pkg", "install", "-y", pkg_name], check=False)


def setup_requirements():
    """Install dependencies once per device."""
    print("🔧 Checking and installing dependencies...")
    ensure_installed('yt-dlp', 'yt-dlp')
    ensure_installed('ffmpeg', 'ffmpeg')
    open(SETUP_MARKER, 'w').close()


def ensure_setup():
    if not os.path.exists(SETUP_MARKER):
        setup_requirements()

# --------------- Permission and cookies ---------------

def ensure_storage_permission():
    """Request storage access once via termux-setup-storage."""
    if not os.path.isfile(PERM_MARKER):
        print("🔒 Requesting storage permission...")
        subprocess.run(["termux-setup-storage"], check=False)
        open(PERM_MARKER, 'w').close()


def save_embedded_cookies():
    """Write cookies.txt from embedded base64 if missing."""
    if not os.path.exists(COOKIES_FILE) and EMBEDDED_COOKIES.strip():
        with open(COOKIES_FILE, 'wb') as f:
            f.write(base64.b64decode(EMBEDDED_COOKIES.strip()))
        print("✅ cookies.txt generated from embedded data.")

# --------------- Media download and scan ---------------

def trigger_media_scan(path):
    """Trigger Android media scan so file shows in gallery."""
    try:
        subprocess.run(["termux-media-scan", path], check=False)
    except FileNotFoundError:
        subprocess.run([
            "am", "broadcast",
            "-a", "android.intent.action.MEDIA_SCANNER_SCAN_FILE",
            "-d", f"file://{path}"
        ], check=False)


def download_media(url: str, audio_only: bool = False):
    """Download video or audio and save with current timestamp."""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    ext = 'mp3' if audio_only else 'mp4'
    filename = f"{timestamp}_{uuid.uuid4()}.{ext}"
    output_path = os.path.join(DOWNLOAD_DIR, filename)

    cmd = [
        'yt-dlp',
        '-f', YT_DLP_FORMAT,
        '--no-mtime',
        '-o', output_path,
        '--cookies', COOKIES_FILE,
        url
    ]
    if audio_only:
        cmd.extend(['--extract-audio', '--audio-format', 'mp3'])

    print(f"⏳ Downloading {'audio' if audio_only else 'video'} to {output_path}...")
    try:
        subprocess.run(cmd, check=True)
        if os.path.isfile(output_path):
            print(f"✅ Download complete: {output_path}")
            trigger_media_scan(output_path)
            print("🔍 Media scanned and should appear in your gallery.\n")
            return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Download failed: {e}\n")
    return False

# --------------- Main loop ---------------

def main_loop():
    print(f"🌟 D-TECH Downloader CLI (continuous mode) 🌟")
    print(f"Media will be saved to: {DOWNLOAD_DIR}\n")
    print("Type 'mp3 <URL>' for audio or just paste <URL> for video. Type 'q' to quit.\n")
    while True:
        user_input = input("> ").strip()
        if not user_input:
            continue
        if user_input.lower() in ('q', 'quit', 'exit'):
            print("👋 Exiting.")
            break
        parts = user_input.split(None, 1)
        if parts[0].lower() == 'mp3' and len(parts) == 2:
            download_media(parts[1], audio_only=True)
        else:
            download_media(parts[0], audio_only=False)


if __name__ == '__main__':
    ensure_setup()
    ensure_storage_permission()
    save_embedded_cookies()
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    main_loop()
